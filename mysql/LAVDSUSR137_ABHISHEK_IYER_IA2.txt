LAB 1
QUESTION 1

SELECT MACHINE_ID
FROM L1_maintenance_records
WHERE YEAR(MAINTENANCE_DATE) = 2024 AND 
MONTH(maintenance_date) = 3 AND 
COST > (SELECT AVG(COST) FROM L1_maintenance_records);

QUESTION 2

SELECT maintenance_type, COUNT(*)
FROM L1_maintenance_records
GROUP BY maintenance_type
ORDER BY COUNT(*) DESC
LIMIT 1;

QUESTION 3

#Highest number of tasks
SELECT maintenance_type, COUNT(*)
FROM L1_maintenance_records
GROUP BY maintenance_type
ORDER BY COUNT(*) DESC
LIMIT 1;
#Highest average cost per task
SELECT technician_name, SUM(COST)/COUNT(*) AS AVG_COST_PER_TASK
FROM L1_maintenance_records
GROUP BY technician_name
ORDER BY AVG_COST_PER_TASK DESC;

LAB 2

QUESTION 4
SELECT AVG(incident_count_pre_update) - AVG(incident_count_post_update) AS AVERAGE_REDUCTION
FROM L2_updates;

QUESTION 5
SELECT update_id, incident_count_pre_update - incident_count_post_update AS REDUCTION, user_feedback_score
FROM L2_updates
ORDER BY REDUCTION DESC, user_feedback_score DESC;

QUESTION 6
SELECT update_id, (incident_count_pre_update - incident_count_post_update)/incident_count_pre_update AS REDUCTION
FROM L2_updates
ORDER BY REDUCTION
LIMIT 1; -DIVIDING BY THE INCIDENT COUNT PRE UPDATE TO COMPARE THE PRE AND POST VALUES;


LAB 3

QUESTION 7

CREATE OR REPLACE VIEW PATIENT_VIST_HISTORY AS 
SELECT patient_name, facility_name, reason_for_visit, visit_date ,outcome
FROM L3_patients P
JOIN L3_visits V
USING (PATIENT_ID)
JOIN L3_treatments T
ON V.visit_id = T.VISIT_ID
JOIN L3_facilities F
ON V.facility_id = F.facility_id;

SELECT *
FROM PATIENT_VIST_HISTORY
WHERE MONTH(VISIT_DATE) = 3 AND YEAR(VISIT_DATE)=2024;

QUESTION 8
SELECT FACILITY_NAME
FROM L3_facilities F
JOIN L3_visits V
USING (facility_id)
WHERE MONTH(VISIT_DATE) = 3 AND YEAR(VISIT_DATE)=2024 AND REASON_FOR_VISIT = "EMERGENCY";

QUESTION 9
SELECT INSURANCE_PROVIDER, COUNT(*)
FROM L3_patients P
JOIN L3_visits V
USING (PATIENT_ID)
JOIN L3_treatments T
ON V.visit_id = T.VISIT_ID
JOIN L3_facilities F
ON V.facility_id = F.facility_id
WHERE MONTH(V.VISIT_DATE) IN (1,2,3) AND YEAR(V.VISIT_DATE)=2024
GROUP BY INSURANCE_PROVIDER
ORDER BY COUNT(*)
LIMIT 1;

LAB 4

QUESTION 10
#SELECTING THE PRODUCT NAME THAT HAS THE HIGHEST QUANTITY SOLD USING SUBQUERIES 
FROM L4_PRODUCTS 
WHERE PRODUCT_ID = (SELECT PRODUCT_ID 
FROM L4_SALES 
WHERE WHERE MONTH(SALE_DATE) = 3 AND YEAR(SALE_DATE)=2024
ORDER BY QUANTITY DESC
LIMIT 1);

# SELECTING THE PRODUCT NAME, QUANTITY AND CATEGORY 
SELECT CATEGORY, PRODUCT_NAME, SUM(quantity)
FROM L4_products 
JOIN L4_sales
USING (PRODUCT_ID)
WHERE MONTH(SALE_DATE) = 3 AND YEAR(SALE_DATE)=2024
GROUP BY CATEGORY, PRODUCT_NAME
ORDER BY SUM(QUANTITY) DESC;

QUESTION 11
CREATE OR REPLACE VIEW SALES_PER_STORE AS 
SELECT STORE_ID, STORE_NAME, REGION, SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, PRICE, QUANTITY*PRICE AS TOTAL_SALES
FROM L4_sales
JOIN L4_stores
USING (STORE_ID)
JOIN L4_products
USING (PRODUCT_ID);

SELECT REGION, SUM(TOTAL_SALES)
FROM SALES_PER_STORE
WHERE MONTH(SALE_DATE) IN (1,2,3)
GROUP BY REGION 
ORDER BY SUM(TOTAL_SALES) DESC
LIMIT 1;

QUESTION 12
SELECT product_id, product_name
FROM L4_sales
FULL OUTER JOIN L4_products
USING (PRODUCT_ID)
FULL OUTER JOIN L4_stores
USING (store_id)
WHERE not exists(select region from l4_sales);

SELECT REGION
FROM L4_sales
FULL OUTERJOIN L4_products
USING (PRODUCT_ID)
FULL OUTER JOIN L4_stores
USING (store_id)
WHERE NOT EXISTS (SELECT PRODUCT_ID FROM L4_products GROUP BY CATEGORY);





