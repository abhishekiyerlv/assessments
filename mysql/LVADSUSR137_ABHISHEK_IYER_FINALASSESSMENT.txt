##Question 1
SELECT P.PRODUCT_CATEGORY, AVG(S.SALES_AMOUNT)
FROM PRODUCTS P
JOIN SALES_RECORDS S
USING (PRODUCT_ID)
WHERE S.SALES_DATE > DATE_SUB(curdate(), INTERVAL 30 DAY)
GROUP BY P.PRODUCT_CATEGORY;

#Question 2
WITH CTE AS (
SELECT PRODUCT_ID, SALES_AMOUNT, SALES_DATE, RANK() OVER (ORDER BY SALES_AMOUNT DESC)
FROM SALES_RECORDS)
SELECT PRODUCT_ID FROM CTE
WHERE YEAR(SALES_DATE) = YEAR(CURDATE())
LIMIT 3;

#Question 3
WITH CTE AS (
SELECT CUSTOMER_NAME, SUM(SALES_AMOUNT)/(SELECT SUM(SALES_AMOUNT) FROM SALES_RECORDS)*100 AS PERCENT_CONTRI
FROM sales_records
JOIN CUSTOMERS
USING (CUSTOMER_ID) 
GROUP BY CUSTOMER_NAME) 
SELECT *, RANK() OVER (ORDER BY PERCENT_CONTRI DESC)
FROM CTE;

#Question 4
SELECT CUSTOMER_NAME, COUNT(*), 
CASE 
	WHEN COUNT(*) > 4 THEN "Consistent Buyer"
    ELSE "Occasional Buyer"
END AS BEHAV_CAT
FROM sales_records
JOIN CUSTOMERS
USING (CUSTOMER_ID) 
WHERE SALES_DATE > DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY CUSTOMER_NAME;


#Question 5
SELECT departure_airport, arrival_airport, AVG(TICKET_PRICE) AS AVG_COST
FROM flights
JOIN TICKETS
USING (FLIGHT_ID)
GROUP BY departure_airport, arrival_airport;

#Question 6
SELECT FLIGHT_NUMBER,  departure_date, COUNT(*) AS TICKETS_SOLD
FROM flights
JOIN TICKETS
USING (FLIGHT_ID)
WHERE TICKET_DATE > DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY FLIGHT_ID
ORDER BY TICKETS_SOLD;

#Question 7
SELECT PASSENGER_NAME, frequent_flyer_status, SUM(TICKET_PRICE) AS TOTAL_SPENT
FROM PASSENGERS 
JOIN TICKETS
USING (PASSENGER_ID)
GROUP BY PASSENGER_NAME, frequent_flyer_status
ORDER BY TOTAL_SPENT
LIMIT 5;

#Question 8
SELECT EXTRACT(YEAR_MONTH FROM ticket_date) AS MONTH, COUNT(*) AS NO_TICKETS_SOLD
FROM tickets
GROUP BY MONTH;

OR 

SELECT YEAR(ticket_date) AS YEAR, MONTH(ticket_date) AS MONTH, COUNT(*) AS NO_TICKETS_SOLD
FROM tickets
GROUP BY YEAR, MONTH;

#Question 9
WITH CTE AS (
SELECT *, DATEDIFF(PLAY_DATE, REGISTRATION_DATE) AS PLAYTIME
FROM PLAYERS
JOIN PLAYERSCORES
USING (PLAYER_ID)
JOIN GAMES
USING (GAME_ID))

SELECT PLAYER_NAME, GAME_GENRE, AVG(PLAYTIME)
FROM CTE
GROUP BY PLAYER_NAME, GAME_GENRE;

#Question 10
SELECT GAME_NAME, COUNT(*) AS COUNT_OF_PLAYERS
FROM GAMES
JOIN PLAYERSCORES
USING (GAME_ID)
GROUP BY GAME_NAME;

#Question 11
SELECT GAME_NAME, AVG(SCORE) AS AVG_SCORE, MAX(SCORE) AS HIGH_SCORE , COUNT(*) AS COUNT_OF_PLAYERS
FROM GAMES
JOIN PLAYERSCORES
USING (GAME_ID)
GROUP BY GAME_NAME;

#Question 12
SELECT PLAYER_NAME, REGISTRATION_DATE, PLAY_DATE
FROM PLAYERS
JOIN PLAYERSCORES
USING (PLAYER_ID)
WHERE DATEDIFF(PLAY_DATE, REGISTRATION_DATE) > 30;

#Question 13
SELECT DOCTOR_NAME, SUM(COST) AS TOTAL_COST
FROM DOCTORS
JOIN TREATMENTS
USING (DOCTOR_ID)
GROUP BY DOCTOR_NAME
ORDER BY TOTAL_COST DESC
LIMIT 5;

#Question 14
SELECT TREATMENT_NAME, SUM(COST) AS TOTAL_COST, SUM(COST)/(SELECT SUM(COST) FROM TREATMENTS)*100 AS PERCENT_CONTRI
FROM TREATMENTS
GROUP BY TREATMENT_NAME
ORDER BY TOTAL_COST DESC;

#Question 15
WITH CTE AS (
SELECT PATIENT_ID, PATIENT_NAME, ADMISSION_DATE, DISCHARGE_DATE, LEAD(ADMISSION_DATE) OVER (PARTITION BY PATIENT_ID ORDER BY ADMISSION_DATE) AS NEXT_ADD_DATE
FROM PATIENTS)
SELECT *
FROM CTE 
WHERE DATEDIFF(ADMISSION_DATE, NEXT_ADD_DATE) < 30; 

#Question 16
WITH CTE AS (
SELECT GENDER, DIAGNOSIS, ADMISSION_DATE, DISCHARGE_DATE, DATEDIFF(DISCHARGE_DATE, ADMISSION_DATE) AS LOS
FROM PATIENTS)
SELECT GENDER, DIAGNOSIS, FLOOR(AVG(LOS))
FROM CTE
GROUP BY GENDER, DIAGNOSIS
ORDER BY GENDER;

#Question 17
SELECT DEPARTMENT, SEMESTER, AVG(GRADE)
FROM COURSES
JOIN ENROLLMENTS
USING (COURSE_ID)
GROUP BY DEPARTMENT, SEMESTER
ORDER BY DEPARTMENT, SEMESTER;


#Question 18
SELECT MAJOR, COUNT(*) AS NUMBER_OF_STUDENTS, enrollment_year
FROM STUDENTS
JOIN ENROLLMENTS
USING (STUDENT_ID) 
GROUP BY MAJOR, ENROLLMENT_YEAR
ORDER BY COUNT(*) DESC;

#Question 19
SELECT STUDENT_ID, STUDENT_NAME, SEMESTER, SUM(CREDITS) AS TOTAL_CREDITS 
FROM STUDENTS
JOIN ENROLLMENTS
USING (STUDENT_ID)
JOIN COURSES
USING (COURSE_ID)
GROUP BY STUDENT_ID, SEMESTER
HAVING TOTAL_CREDITS > 50;

#Question 20
SELECT COURSE_NAME, enrollment_year, COUNT(STUDENT_ID) AS COUNT
FROM STUDENTS
JOIN ENROLLMENTS
USING (STUDENT_ID)
JOIN COURSES
USING (COURSE_ID)
GROUP BY COURSE_NAME, enrollment_year;


