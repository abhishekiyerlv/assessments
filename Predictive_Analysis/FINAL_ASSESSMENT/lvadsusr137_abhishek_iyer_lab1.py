# -*- coding: utf-8 -*-
"""LVADSUSR137_Abhishek_Iyer_LAB1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A0QRunz3G-yN2yeHs_A5PF92SZG2oLxD
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import r2_score,mean_squared_error

df = pd.read_csv("/content/Fare prediction.csv")
df.head()

df.info()

df.describe()

corr = df.corr(numeric_only = True)
sns.heatmap(corr,annot=True)

df.isnull().sum()

df.columns

df.drop_duplicates()

for cols in df.select_dtypes(include=['int64','float64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[cols])
    plt.title(f'Histogram of {cols}')
    plt.xlabel(cols)
    plt.ylabel('Frequency')
    plt.show()

sns.boxplot(df.passenger_count)

list = ['fare_amount','dropoff_longitude']
for cols in list:
  sns.boxplot(df[cols])
  plt.title(cols)
  plt.show()

list = ['fare_amount','dropoff_longitude','passenger_count']
for cols in list:
  Q1 = df[cols].quantile(0.25)
  Q3 = df[cols].quantile(0.75)
  IQR = Q3-Q1
  lb = Q1-1.5*IQR
  ub = Q3+1.5*IQR
  df = df[(df[cols] > lb) & (df[cols] < ub)]

df.drop(columns = ['pickup_datetime','key'],inplace=True)

df = pd.get_dummies(df)

cols = df.columns
enc = MinMaxScaler()
enc.fit_transform(df)

df = pd.DataFrame(data = df, columns = cols)
df

X = df.drop(columns = ['fare_amount'])
y = df.fare_amount
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)

model = RandomForestRegressor(n_estimators=100)
model.fit(X_train, y_train)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)

