# -*- coding: utf-8 -*-
"""LVADSUSR137_AbhishekIyer_LAB3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sVkkyS5est-hJBDSj6Iz94jj2fgQe4aM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from sklearn.metrics import r2_score,mean_squared_error, silhouette_score

df = pd.read_csv("/content/customer_segmentation.csv")
df.head()

df.columns

df.shape

df.info()

df.isna().sum()

df['Income'] = df.Income.fillna(np.mean(df.Income))

df.isna().sum()

df.drop_duplicates()

list = ['Income','Recency']
for cols in list:
  sns.boxplot(df[cols])
  plt.title(cols)
  plt.show()

Q1 = df.Income.quantile(0.25)
Q3  = df.Income.quantile(0.75)
IQR = Q3 - Q1
lb = Q1-1.5*IQR
ub = Q3+1.5*IQR
df = df[(df.Income > lb) & (df.Income < ub)]
df.shape

corr = df.corr(numeric_only= True)
plt.figure(figsize = (20,20))
sns.heatmap(corr,annot=True)
plt.show()

#Num-Catalog - MntMeatProducts - high correlation
#Num-Catalog - Income - high correlation
#Mnt-wins - Income - high correlation
df.columns

df.drop(columns = ['ID','Dt_Customer','NumCatalogPurchases','MntWines'], inplace=True)

df = pd.get_dummies(df)

#cols = df.columns
#enc = MinMaxScaler()
#df = enc.fit_transform(df)
#df

#df = pd.DataFrame(data = df, columns = cols)
#df

wcss = []
for i in range(1,11):
  kmeans = KMeans(n_clusters = i, init='k-means++', random_state = 1)
  kmeans.fit(df)
  wcss.append(kmeans.inertia_)

#Plotting the figure
plt.figure(figsize=(8,6))
plt.plot(range(1,11), wcss, marker='o', linestyle='-')
plt.xlabel('Number of Clusters')
plt.ylabel('Within-Cluster Sum of Squares (WCSS)')
plt.xticks(np.arange(1, 11, 1))
plt.grid(True)
plt.show()

kmeans = KMeans(n_clusters = 3, init='k-means++', random_state = 1)
kmeans.fit(df)

print(silhouette_score(df, kmeans.labels_))

cluster_labels = kmeans.fit_predict(df)
preds = kmeans.labels_
kmeans_df = pd.DataFrame(df)
kmeans_df['KMeans_Clusters'] = preds
kmeans_df.head(10)

pred = kmeans.fit_predict(df)
pred

plt.scatter(df['Income'], df['Year_Birth'],c=pred)

