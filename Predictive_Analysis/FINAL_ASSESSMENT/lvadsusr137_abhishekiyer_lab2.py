# -*- coding: utf-8 -*-
"""LVADSUSR137_AbhishekIyer_LAB2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SzlJiW2CT0Y2ssy51kulOwm9FtrLP0T2
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn import tree
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import r2_score,mean_squared_error, silhouette_score, accuracy_score, recall_score, precision_score, f1_score
import math

df = pd.read_csv("/content/penguins_classification.csv")
df.head()

df.info()

df.describe()

corr = df.corr(numeric_only = True)
sns.heatmap(corr, annot=True)

df.drop(columns = 'body_mass_g',inplace=True)

df.isnull().sum()

df.fillna(np.mean(df.bill_depth_mm),inplace=True)

df.isna().sum()

df.drop_duplicates()

df.columns

''''
for cols in df.select_dtypes(include=['int','float']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[cols])
    plt.title(f'Histogram of {cols}')
    plt.xlabel(cols)
    plt.ylabel('Frequency')
    plt.show()
'''

'''
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()
'''

cols = df.select_dtypes(include=['int64','float64']).columns
for column in cols:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

list = ['bill_length_mm']
for cols in list:
  Q1 = df[cols].quantile(0.25)
  Q3 = df[cols].quantile(0.75)
  IQR = Q3-Q1
  lb = Q1-1.5*IQR
  ub = Q3+1.5*IQR
  df = df[(df[cols] > lb) & (df[cols] < ub)]

X = df.drop(columns = ['species'])
y = df.species

X = pd.get_dummies(X)

cols = X.columns
enc = MinMaxScaler()
X = enc.fit_transform(X)

X = pd.DataFrame(X, columns = cols)

enc = LabelEncoder()
y = enc.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3)

model = RandomForestClassifier(n_estimators=100,criterion='gini')
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)

accuracy = accuracy_score(y_test,y_pred)
print("Accuracy score:", accuracy)

precision = precision_score(y_test,y_pred)
print("precision score:", precision)


recall = recall_score(y_test,y_pred)
print("recall score:", recall)

f1 = f1_score(y_test,y_pred)
print("f1_score: ", f1)

accuracy = accuracy_score(y_test,y_pred)
print("Accuracy score:", accuracy)

