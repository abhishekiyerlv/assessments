# -*- coding: utf-8 -*-
"""LVADSUSR137_Abhishek_Iyer_E.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PhJoX1pev_rmFjYH14FiimFwgEVBJIt9
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, recall_score, f1_score, precision_score, r2_score,mean_squared_error, confusion_matrix

df = pd.read_csv("/content/expenses.csv")
df.head()

df.info()

#Check for null values
df.isna().sum()

df.shape

df['bmi'] = df.bmi.fillna(np.mean(df.bmi))

df.isna().sum()

num_col = df.select_dtypes(include = ['int64','float64']).columns

for column in num_col:
  plt.figure(figsize=(5,5))
  sns.boxplot(df[column])
  plt.title(column)
  plt.show()

#From the above output, we can see that charges and BMI have outliers
#Deleting the outliers for charges
CQ1 = df.charges.quantile(0.25)
CQ3 = df.charges.quantile(0.75)
CIQR = CQ3 - CQ1
Clb = CQ1-1.5*CIQR
Cub = CQ3+1.5*CIQR
df = df[(df.charges > Clb) & (df.charges < Cub)]
df.shape

#Deleting the outliers for BMI
BQ1 = df.bmi.quantile(0.25)
BQ3 = df.bmi.quantile(0.75)
BIQR = BQ3 - BQ1
Blb = CQ1-1.5*BIQR
Bub = CQ3+1.5*BIQR
df = df[(df.charges > Blb) & (df.charges < Bub)]
df.shape

#We need to encode the following data - sex, smoker, region
df_enc = pd.get_dummies(df)
df_enc.head()

corr_mat =df[num_col].corr()
sns.heatmap(corr_mat, annot = True, fmt='.2f')
plt.show()

#As we can see from the above correlation graph, age is higly correlated with Children and Charges.
#So we can remove Age from the model.
df_enc = df_enc.drop(columns = 'age')
df_enc.head()

df.duplicated()

#No duplicates to drop

X = df_enc.drop(columns = 'charges')
y = df_enc.charges
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(mean_squared_error(y_test, y_pred))

print(r2_score(y_test,y_pred))

