# -*- coding: utf-8 -*-
"""LVADUSR137_AbhishekIyer_W.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OsrRFdPHkVkSzMutnvD2j1wKv9h_oC6t
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler, LabelEncoder, OneHotEncoder
from category_encoders import BinaryEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn import tree
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import r2_score,mean_squared_error, silhouette_score, accuracy_score, recall_score, precision_score, f1_score
import math

df = pd.read_csv("/content/winequality-red.csv")
df.head()

df.isna().sum()

df['fixed acidity'] = df['fixed acidity'].fillna(np.mean(df['fixed acidity']))
df['volatile acidity'] = df['volatile acidity'].fillna(np.mean(df['volatile acidity']))
df['citric acid'] = df['citric acid'].fillna(np.mean(df['citric acid']))
df['residual sugar'] = df['residual sugar'].fillna(np.mean(df['residual sugar']))
df['chlorides'] = df['chlorides'].fillna(np.mean(df['chlorides']))
df['sulphates'] = df['sulphates'].fillna(np.mean(df['sulphates']))

df['free sulfur dioxide'] = df['free sulfur dioxide'].fillna(np.mean(df['free sulfur dioxide']))
df.isna().sum()

num_col = df.select_dtypes(include = ['int64','float64']).columns

for column in num_col:
  plt.figure(figsize=(5,5))
  sns.boxplot(df[column])
  plt.title(column)
  plt.show()

#outliers
  #fixed acidity, volatile acidity, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, ph, sulphates

Q1 = df['fixed acidity'].quantile(0.25)
Q3 = df['fixed acidity'].quantile(0.75)
IQR = Q3 - Q1
lb = Q1-1.5*IQR
ub = Q3+1.5*IQR
df = df[(df['fixed acidity'] > lb) & (df['fixed acidity'] < ub)]

df.columns

list = ['volatile acidity', 'residual sugar', 'chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates']
for column in list:
  Q1 = df[column].quantile(0.25)
  Q3 = df[column].quantile(0.75)
  IQR = Q3 - Q1
  lb = Q1-1.5*IQR
  ub = Q3+1.5*IQR
  df = df[(df[column] > lb) & (df[column] < ub)]

df.shape

df.quality.unique()

df['Rating'] = df.quality.apply(lambda x: 0 if x in [3,4,5,6] else 1)

df.Rating.value_counts()

corr = df.corr(numeric_only=True)
plt.figure(figsize = (8,8))
sns.heatmap(corr,fmt = ".2f", annot=True)
plt.show()

# We are removing the free sulphur dioxide because it is higly correlated with total sulpher dioxide and we are doing the same with
# fixed acidity as it is highly correlated with citric acid and denisity
df.drop(columns = ['free sulfur dioxide','fixed acidity'],inplace= True)

df.drop_duplicates()

df.shape

X = df.drop(columns = ['quality','Rating'])
y = df.Rating
X_train, X_test, y_train, y_test = train_test_split(X,y)

enc = MinMaxScaler()
X_train = enc.fit_transform(X_train)
X_test = enc.transform(X_test)

model = RandomForestClassifier()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)

print(accuracy_score(y_test,y_pred))

print(recall_score(y_test,y_pred))

print(precision_score(y_test,y_pred))

