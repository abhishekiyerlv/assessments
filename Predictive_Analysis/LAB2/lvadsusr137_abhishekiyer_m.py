# -*- coding: utf-8 -*-
"""LVADSUSR137_AbhishekIyer.M.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RVR-GX873xZMhjhmQsV47gMxn9O04nbe
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn import tree
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import r2_score,mean_squared_error, silhouette_score
import math

df = pd.read_csv("/content/Mall_Customers.csv")
df.head()

df.drop(columns = ['CustomerID'],inplace=True)

corr = df.corr(numeric_only=True)
sns.heatmap(corr,fmt = ".2f", annot=True)
plt.show()

df.head()

cols = df.columns
enc = MinMaxScaler()
enc.fit_transform(df)

df = pd.DataFrame(df,columns = cols)

df = pd.get_dummies(df)

df.isna().sum()

df['Annual Income (k$)'] = df['Annual Income (k$)'].fillna(np.mean(df['Annual Income (k$)']))

df.drop_duplicates()

wcss = []
for i in range(1,11):
  kmeans = KMeans(n_clusters = i)
  kmeans.fit(df)
  wcss.append(kmeans.inertia_)

#Plotting the figure
plt.figure(figsize=(8,6))
plt.plot(range(1,11), wcss, marker='o', linestyle='-')
plt.xlabel('Number of Clusters')
plt.ylabel('Within-Cluster Sum of Squares (WCSS)')
plt.xticks(np.arange(1, 11, 1))
plt.grid(True)
plt.show()

kmeans3 = KMeans(n_clusters = 4)
kmeans3.fit(df)
cluster_labels = kmeans3.fit_predict(df)

plt.scatter(df['Age'],df['Annual Income (k$)'],c=cluster_labels)

print(silhouette_score(df,kmeans.labels_))

kmeans3 = KMeans(n_clusters = 3)
kmeans3.fit(df)
cluster_labels = kmeans3.fit_predict(df)

plt.scatter(df['Age'],df['Annual Income (k$)'],c=cluster_labels)

print(silhouette_score(df,kmeans.labels_))

df['Segment'] = cluster_labels
df.head()

df.Segment.unique()

Seg1 = df[df.Segment == 0]
Seg2 = df[df.Segment == 1]
Seg3 = df[df.Segment == 2]

Seg1.Age.mean()

Seg2.Age.mean()

Seg3.Age.mean()

Seg1.Age.median()

Seg2.Age.median()

Seg3.Age.median()

Seg1.Age.mode()

Seg3.Age.mode()

Seg3.Age.mode()

Seg1.describe()

Seg2.describe()

Seg3.describe()

#Targeted Marketing Strategies -
#Based on the average income and the spending score, the spending score of segment 3 is the highest
#with a similar average incomes. We can see that there is a distiniction between people
# in the avereage income bracket to be more suseptibile to spending on things, we need to
# focus on this segment as well as segment 1 to improve the shopping experience.

